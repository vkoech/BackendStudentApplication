//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace StudentManagementApi.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="StudentManagementWebService_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/StudentManagementWebService")]
    public partial class StudentManagementWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback INSERTStudentApplicationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public StudentManagementWebService() {
            this.Url = global::StudentManagementApi.Properties.Settings.Default.StudentManagementApi_WebReference_StudentManagementWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event INSERTStudentApplicationCompletedEventHandler INSERTStudentApplicationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/StudentManagementWebService:INSERTStudent" +
            "Application", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/StudentManagementWebService", ResponseElementName="INSERTStudentApplication_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/StudentManagementWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool INSERTStudentApplication(
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime dOB, 
                    string gender, 
                    string @class, 
                    string term, 
                    string countyCode, 
                    string nEMISNo, 
                    string academicYear, 
                    string names, 
                    string type, 
                    string occupation, 
                    string mobileNo, 
                    string companyName, 
                    string companyAddress, 
                    string email, 
                    string companyTelNo, 
                    string residentialAddress, 
                    string apartmentNo, 
                    string houseNo, 
                    string address) {
            object[] results = this.Invoke("INSERTStudentApplication", new object[] {
                        firstName,
                        middleName,
                        lastName,
                        dOB,
                        gender,
                        @class,
                        term,
                        countyCode,
                        nEMISNo,
                        academicYear,
                        names,
                        type,
                        occupation,
                        mobileNo,
                        companyName,
                        companyAddress,
                        email,
                        companyTelNo,
                        residentialAddress,
                        apartmentNo,
                        houseNo,
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void INSERTStudentApplicationAsync(
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    System.DateTime dOB, 
                    string gender, 
                    string @class, 
                    string term, 
                    string countyCode, 
                    string nEMISNo, 
                    string academicYear, 
                    string names, 
                    string type, 
                    string occupation, 
                    string mobileNo, 
                    string companyName, 
                    string companyAddress, 
                    string email, 
                    string companyTelNo, 
                    string residentialAddress, 
                    string apartmentNo, 
                    string houseNo, 
                    string address) {
            this.INSERTStudentApplicationAsync(firstName, middleName, lastName, dOB, gender, @class, term, countyCode, nEMISNo, academicYear, names, type, occupation, mobileNo, companyName, companyAddress, email, companyTelNo, residentialAddress, apartmentNo, houseNo, address, null);
        }
        
        /// <remarks/>
        public void INSERTStudentApplicationAsync(
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    System.DateTime dOB, 
                    string gender, 
                    string @class, 
                    string term, 
                    string countyCode, 
                    string nEMISNo, 
                    string academicYear, 
                    string names, 
                    string type, 
                    string occupation, 
                    string mobileNo, 
                    string companyName, 
                    string companyAddress, 
                    string email, 
                    string companyTelNo, 
                    string residentialAddress, 
                    string apartmentNo, 
                    string houseNo, 
                    string address, 
                    object userState) {
            if ((this.INSERTStudentApplicationOperationCompleted == null)) {
                this.INSERTStudentApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnINSERTStudentApplicationOperationCompleted);
            }
            this.InvokeAsync("INSERTStudentApplication", new object[] {
                        firstName,
                        middleName,
                        lastName,
                        dOB,
                        gender,
                        @class,
                        term,
                        countyCode,
                        nEMISNo,
                        academicYear,
                        names,
                        type,
                        occupation,
                        mobileNo,
                        companyName,
                        companyAddress,
                        email,
                        companyTelNo,
                        residentialAddress,
                        apartmentNo,
                        houseNo,
                        address}, this.INSERTStudentApplicationOperationCompleted, userState);
        }
        
        private void OnINSERTStudentApplicationOperationCompleted(object arg) {
            if ((this.INSERTStudentApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.INSERTStudentApplicationCompleted(this, new INSERTStudentApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void INSERTStudentApplicationCompletedEventHandler(object sender, INSERTStudentApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class INSERTStudentApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal INSERTStudentApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591